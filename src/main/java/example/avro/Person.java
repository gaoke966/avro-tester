/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package example.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Person extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Person\",\"namespace\":\"example.avro\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"idcard\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence idcard;
  @Deprecated public int age;

  /**
   * Default constructor.
   */
  public Person() {}

  /**
   * All-args constructor.
   */
  public Person(java.lang.CharSequence name, java.lang.CharSequence idcard, java.lang.Integer age) {
    this.name = name;
    this.idcard = idcard;
    this.age = age;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return idcard;
    case 2: return age;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: idcard = (java.lang.CharSequence)value$; break;
    case 2: age = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'idcard' field.
   */
  public java.lang.CharSequence getIdcard() {
    return idcard;
  }

  /**
   * Sets the value of the 'idcard' field.
   * @param value the value to set.
   */
  public void setIdcard(java.lang.CharSequence value) {
    this.idcard = value;
  }

  /**
   * Gets the value of the 'age' field.
   */
  public java.lang.Integer getAge() {
    return age;
  }

  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(java.lang.Integer value) {
    this.age = value;
  }

  /** Creates a new Person RecordBuilder */
  public static example.avro.Person.Builder newBuilder() {
    return new example.avro.Person.Builder();
  }
  
  /** Creates a new Person RecordBuilder by copying an existing Builder */
  public static example.avro.Person.Builder newBuilder(example.avro.Person.Builder other) {
    return new example.avro.Person.Builder(other);
  }
  
  /** Creates a new Person RecordBuilder by copying an existing Person instance */
  public static example.avro.Person.Builder newBuilder(example.avro.Person other) {
    return new example.avro.Person.Builder(other);
  }
  
  /**
   * RecordBuilder for Person instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Person>
    implements org.apache.avro.data.RecordBuilder<Person> {

    private java.lang.CharSequence name;
    private java.lang.CharSequence idcard;
    private int age;

    /** Creates a new Builder */
    private Builder() {
      super(example.avro.Person.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(example.avro.Person.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing Person instance */
    private Builder(example.avro.Person other) {
            super(example.avro.Person.SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.idcard)) {
        this.idcard = data().deepCopy(fields()[1].schema(), other.idcard);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.age)) {
        this.age = data().deepCopy(fields()[2].schema(), other.age);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'name' field */
    public java.lang.CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public example.avro.Person.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'name' field */
    public example.avro.Person.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'idcard' field */
    public java.lang.CharSequence getIdcard() {
      return idcard;
    }
    
    /** Sets the value of the 'idcard' field */
    public example.avro.Person.Builder setIdcard(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.idcard = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'idcard' field has been set */
    public boolean hasIdcard() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'idcard' field */
    public example.avro.Person.Builder clearIdcard() {
      idcard = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'age' field */
    public java.lang.Integer getAge() {
      return age;
    }
    
    /** Sets the value of the 'age' field */
    public example.avro.Person.Builder setAge(int value) {
      validate(fields()[2], value);
      this.age = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'age' field has been set */
    public boolean hasAge() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'age' field */
    public example.avro.Person.Builder clearAge() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Person build() {
      try {
        Person record = new Person();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.idcard = fieldSetFlags()[1] ? this.idcard : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.age = fieldSetFlags()[2] ? this.age : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
